
require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { GEMINI_API_KEY } = require("../config/config");

if (!GEMINI_API_KEY) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: GEMINI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!");
    process.exit(1);
}

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

async function generateResponse(comment, retries = 5) {
    try {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const result = await model.generateContent(comment);
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É Gemini API:", error.message);

        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ 503 (–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞), –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑ –¥–æ–≤—à–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if (error.status === 503 && retries > 0) {
            const delay = Math.pow(2, 6 - retries) * 5000; // 5, 10, 20, 40 —Å–µ–∫
            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫—É–Ω–¥... (–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${retries})`);
            await new Promise(resolve => setTimeout(resolve, delay));
            return generateResponse(comment, retries - 1);
        }

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏
        if (error.message.includes("Candidate was blocked due to SAFETY")) {
            console.log("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ Google. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.");
            return "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.";
        }

        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.";
    }
}

module.exports = { generateResponse };
