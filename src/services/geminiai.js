
require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { GEMINI_API_KEY } = require("../config/config");
const { promptTemplate, unwantedPhrases } = require("../config/promptConfig");

if (!GEMINI_API_KEY) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: GEMINI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!");
    process.exit(1);
}

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

async function generateResponse(comment, retries = 5) {
    try {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        const prompt = `${promptTemplate}\nUser: ${comment}\nResponse:`;

        const result = await model.generateContent(prompt);
        let response = await result.response.text();

        // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è "–±–æ—Ç—Å—å–∫–∏—Ö" —Ñ—Ä–∞–∑
        unwantedPhrases.forEach(phrase => {
            response = response.replace(new RegExp(phrase, "gi"), "");
        });

        return response.trim();
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É Gemini API:", error.message);

        if (error.status === 503) {
            if (retries > 0) {
                const delay = Math.pow(2, 6 - retries) * 5000; // 5, 10, 20, 40 —Å–µ–∫
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫—É–Ω–¥... (–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${retries})`);
                await new Promise(resolve => setTimeout(resolve, delay));
                return generateResponse(comment, retries - 1);
            } else {
                console.log("‚ùå –°–µ—Ä–≤—ñ—Å Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±.");
                return "‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.";
            }
        }

        if (error.message.includes("Candidate was blocked due to SAFETY")) {
            console.log("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ Google. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.");
            return "–¶—ñ–∫–∞–≤–∏–π –∑–∞–ø–∏—Ç! –Ø —Å–ø—Ä–æ–±—É—é –∑–Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.";
        }

        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.";
    }
}

module.exports = { generateResponse };


