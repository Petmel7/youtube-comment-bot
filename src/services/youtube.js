
const axios = require("axios");
const { getAccessToken } = require('../config/oauth');
const { YOUTUBE_API_KEY, CHANNEL_ID } = require("../config/config");

async function getLatestVideoId() {
    const url = `https://www.googleapis.com/youtube/v3/search?key=${YOUTUBE_API_KEY}&channelId=${CHANNEL_ID}&part=id&type=video&maxResults=1`;
    try {
        const response = await axios.get(url);
        return response.data.items[0]?.id?.videoId || null;
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ VIDEO_ID:", error.message);
        return null;
    }
}

async function getComments() {
    const videoId = await getLatestVideoId();
    console.log("‚úÖ videoId", videoId);
    if (!videoId) return [];

    const url = `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&videoId=${videoId}&key=${YOUTUBE_API_KEY}`;
    try {
        const response = await axios.get(url);
        return response.data.items.map(item => ({
            id: item.id,
            text: item.snippet.topLevelComment.snippet.textDisplay
        }));
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:", error.message);
        return [];
    }
}

async function replyToComment(commentId, responseText) {
    try {

        const accessToken = await getAccessToken();
        console.log("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç–æ–∫–µ–Ω:", accessToken); // –î–æ–¥–∞—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏


        const url = "https://www.googleapis.com/youtube/v3/comments?part=snippet";
        const data = { snippet: { parentId: commentId, textOriginal: responseText } };
        const headers = { Authorization: `Bearer ${accessToken}`, "Content-Type": "application/json" };

        const response = await axios.post(url, data, { headers });
        // console.log(`üìå –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–¥–∞–Ω–∞ –ø—ñ–¥ –≤—ñ–¥–µ–æ: https://www.youtube.com/watch?v=${response.data.snippet.videoId}`);

        console.log("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–¥–∞–Ω–∞:", response.data);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä:", error.message);
    }
}

module.exports = { getComments, replyToComment };
